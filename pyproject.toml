# Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
[project]
requires-python = ">=3.10"

[tool.poetry]
name = "nemo_toolkit"
version = "1.21.0"
description = "NVIDIA NeMo"
authors = ["nvidia nvidia <nemo-toolkit@nvidia.com>"]
license = "Nvidia"
readme = "README.rst"
homepage = "https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/"
repository = "https://github.com/nvidia/nemo"
documentation = "https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/"
packages = [{include = "nemo"}]

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
huggingface-hub = "^0.22.2"
numba = "^0.59.1"
numpy = ">=1.22,<1.24"
python-dateutil = "^2.9.0.post0"
ruamel-yaml = "^0.18.6"
scikit-learn = "^1.4.2"
setuptools = ">=65.5.1"
tensorboard = "^2.16.2"
tensorstore = "<0.1.46"
zarr = "^2.18.2"
text-unidecode = "^1.3"
torch = "^2.1.2"
tqdm = ">=4.41.0"
wget = "^3.2"
wrapt = "^1.16.0"
inflect = "^7.2.0"
pandas = "^2.2.2"
sacremoses = ">=0.0.43"
sentencepiece = "<1.0.0"
boto3 = "^1.34.43"
einops = "^0.7.0"
faiss-cpu = "^1.8.0"
flask-restful = "^0.3.10"
ftfy = "^6.2.0"
gdown = "^5.1.0"
h5py = "^3.11.0"
ijson = "^3.2.3"
jieba = "^0.42.1"
markdown2 = "^2.4.13"
matplotlib = ">=3.3.2"
megatron-core = "0.3.0"
nltk = ">=3.6.5"
pangu = "^4.0.6.1"
rapidfuzz = "^3.8.1"
rouge-score = "^0.1.2"
sacrebleu = {extras = ["ja"], version = "^2.4.2"}
sentence-transformers = "^2.4.0"
hydra-core = ">=1.3,<1.3.2"
omegaconf = ">=2.2,<2.3"
pytorch-lightning = ">=2.0,<=2.0.7"
torchmetrics = ">=0.11.0"
transformers = ">=4.0.1,<=4.33.3"
wandb = "^0.16.6"
webdataset = ">=0.1.48,<=0.1.62"

[tool.isort]
profile = "black"  # black-compatible
line_length = 119  # should match black parameters
ignore_whitespace = true  # ignore whitespace for compatibility with the initial style
py_version = 310  # python 3.10 as a target version
known_first_party = ["nemo"]  # FIRSTPARTY section
known_third_party = ["nemo_text_processing", "examples", "scripts"]  # THIRDPARTY section
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
extend_skip = ["setup.py", "docs/source/conf.py"]


[tool.black]
line_length = 119
skip_string_normalization = true
required_version = "19.10b0"  # recongized by future versions, disallows to reformat code with incompatible versions


[tool.pytest.ini_options]
# durations=0 will display all tests execution time, sorted in ascending order starting from from the slowest one.
# -vv will also display tests with durration = 0.00s
addopts = "--verbose --pyargs --durations=0 --strict-markers"  # always add these arguments to pytest
testpaths = ["tests"]
# directories to ignore when discovering tests
norecursedirs = [
    "nemo",
    "nemo_text_processing",
    "external",
    "examples",
    "docs",
    "scripts",
    "tools",
    "tutorials",
    "*.egg",
    ".*",
    "_darcs",
    "build",
    "CVS",
    "dist",
    "venv",
    "{arch}"
]
# markers to select tests, use `pytest --markers` to see all available markers, `pytest -m "<marker>"` to select tests
markers = [
    "unit: marks unit test, i.e. testing a single, well isolated functionality (deselect with '-m \"not unit\"')",
    "integration: marks test checking the elements when integrated into subsystems (deselect with '-m \"not integration\"')",
    "system: marks test working at the highest integration level (deselect with '-m \"not system\"')",
    "acceptance: marks test checking whether the developed product/model passes the user defined acceptance criteria (deselect with '-m \"not acceptance\"')",
    "docs: mark tests related to documentation (deselect with '-m \"not docs\"')",
    "skipduringci: marks tests that are skipped ci as they are addressed by Jenkins jobs but should be run to test user setups",
    "pleasefixme: marks tests that are broken and need fixing",
]
